<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
	<groupId>com.appspot.roovemore.common</groupId>
	<artifactId>roovemore-common</artifactId>
	<version>1.0</version>
	<packaging>pom</packaging>

	<name>roovemore-common</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!--
		<github.global.oauth2Token>${env.GH_TOKEN}</github.global.oauth2Token>
		 -->
		<github.global.password>${env.GH_TOKEN}</github.global.password>
		<github.global.userName>${env.GIT_NAME}</github.global.userName>
	</properties>

	<!-- Create a artifacts to local maven repository -->
	<distributionManagement>
		<repository>
			<id>internal.repos</id>
			<name>Temporary Staging Repository</name>
			<url>file://${project.build.directory}/mvn-repo</url>
		</repository>
	</distributionManagement>

	<!-- Upload from local maven repository to github -->
	<build>
		<plugins>
			<plugin>
				<groupId>com.github.github</groupId>
				<artifactId>site-maven-plugin</artifactId>
				<version>0.10</version>
				<configuration>

					<!-- git push時のコミットコメント -->
					<!-- コメントci skipはtravis ciの仕様で、このコメントがあるとciをスキップしてくれる。はずらしいが実際はしてくれないっぽい… -->
					<message>Auto push maven artifacts for ${project.version} ci skip</message>

					<noJekyll>true</noJekyll>
					<!-- 事前に成果物をデプロイした場所から吸い上げ、github側に反映するイメージ -->
					<!-- 基本的にはmaven-deploy-plugin or distributionManagement にて配備したディレクトリと合わせる -->
					<outputDirectory>${project.build.directory}/mvn-repo</outputDirectory>
					<!-- この場合ブランチ名は、mvn-repo。もしgit上でこのブランチがなくてもエラーとならず、このブランチを生成してくれる -->
					<branch>refs/heads/mvn-repo</branch>
					<includes><include>**/*</include></includes>
					<!-- 最終的に他プロジェクトでdependencyする際は repositoryName、repositoryOwnerを組立URLとしている？-->
					<repositoryName>${project.artifactId}</repositoryName>
					<repositoryOwner>${env.GIT_NAME}</repositoryOwner>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>site</goal>
						</goals>
						<phase>deploy</phase>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
